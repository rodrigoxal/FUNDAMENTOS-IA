Principais etapas do c√≥digo:  

### üîπ **1. Defini√ß√£o das Classes Principais**  
- **`Node`**: Representa um estado no labirinto, armazenando posi√ß√£o, a√ß√£o e o n√≥ pai.  
- **`StackFrontier` e `QueueFrontier`**: Gerenciam a fronteira da busca (pilha para DFS, fila para BFS).  

Classe Node: Linha 3
Classe StackFrontier e QueueFrontier: Linha 10 e 25

### üîπ **2. Leitura e Constru√ß√£o do Labirinto**  
- O arquivo de texto √© lido para criar a matriz do labirinto.  
- Identifica o ponto de in√≠cio (`A`), o destino (`B`) e as paredes (`*`).  

In√≠cio da classe Maze (leitura do arquivo e cria√ß√£o do labirinto): Linha 34

### üîπ **3. Resolu√ß√£o do Labirinto**  
- Utiliza **busca em profundidade (DFS)** para encontrar um caminho do in√≠cio at√© o destino.  
- Mant√©m um conjunto de estados explorados para evitar loops.  
- Ao encontrar o destino, reconstr√≥i o caminho percorrido.  

M√©todo solve (busca em profundidade DFS para encontrar solu√ß√£o): Linha 87

### üîπ **4. Exibi√ß√£o e Gera√ß√£o de Imagem**  
- **Imprime o labirinto** no console, mostrando paredes, caminho e solu√ß√£o.  
- **Gera uma imagem PNG** do labirinto e da solu√ß√£o usando a biblioteca Pillow.  

M√©todo print (exibir o labirinto no console): Linha 63
M√©todo output_image (gerar imagem do labirinto): Linha 127

Leitura do arquivo e execu√ß√£o do programa: Linha 157
